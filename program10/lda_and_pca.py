# -*- coding: utf-8 -*-
"""LDA_and_PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LKGnk6bsV0esenEHeAnJD0e39LMWUY-C

LINEAR DISCRIMINANT ANALYSIS AND PRINCIPLE COMPONENT ANALYSIS

PCA - > Principle Component Analysis
"""

#PCA
#import necessary libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA as sklearnPCA

#Load iris
X = load_iris().data
y = load_iris().target

print(X)

print(y)

#perform data preprocessing
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#calculate and plot correlation Matrix
corr_matrix = np.corrcoef(X_scaled.T)
plt.figure(figsize=(12,12))
sns.heatmap(corr_matrix,annot = True,cmap = "coolwarm")
plt.title('correlation matrix')
plt.show()

#perform PCA using sklearn
pca = sklearnPCA(n_components = 2)
X_projected = pca.fit_transform(X_scaled)

print("shape of data :" , X.shape)
print("Shape of tranformed data " , X_projected.shape)

pc1 = X_projected[:,0]
pc2 = X_projected[:,1]

plt.scatter(pc1,pc2,c = y,cmap = 'jet')
plt.xlabel('PC1')
plt.ylabel('PC2')

"""LDA - > Linear Discriminant Analysis"""

#import necessary libraries
#LDA
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

#load iris
X = load_iris().data
y = load_iris().target
print(X)
print(y)

#perform data preprocessing
scaler = StandardScaler()
X_scaled1 = scaler.fit_transform(X)

#calculate and plot correlation Matrix
corr1_matrix = np.corrcoef(X_scaled1.T)
plt.figure(figsize = (12,12))
sns.heatmap(corr_matrix,annot = True,cmap = 'coolwarm')
plt.title("Correlation matrix")
plt.show()

#perform LDA using sklearn
lda = LinearDiscriminantAnalysis(n_components = 2)
X_projected = lda.fit_transform(X_scaled1,y)

print("shape of data :",X.shape)
print("shape of transformed data = :",X_projected)

ld1 = X_projected[:,0]
ld2 = X_projected[:,1]

plt.scatter(ld1,ld2,c= y,cmap = 'jet')
plt.xlabel("LD1")
plt.ylabel("LD2")
plt.title("LDA")
plt.show()